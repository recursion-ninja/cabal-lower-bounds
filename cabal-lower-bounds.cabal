cabal-version:      2.2
category:           Tool
build-type:         Simple
name:               cabal-lower-bounds
version:            0.2

author:             Alex Washburn
maintainer:         github@recursion.ninja
license:            BSD-3-Clause
license-file:       LICENSE
copyright:          Copyright (C) 2020 Alex Washburn
homepage:           https://github.com/recursion-ninja/cabal-lower-bounds
bug-reports:        https://github.com/recursion-ninja/cabal-lower-bounds/issues

synopsis:           Collect the lower bounds of all dependencies of a cabal project

description:        Read in a cabal file and collect the lower bounds of all dependencies.
                    Output the lower bounds in a format that is easy to convert into a project file.
                    

tested-with:
  GHC==9.4.1,
  GHC==9.2.4,
  GHC==9.0.2,
  GHC==8.10.7,
  GHC==8.8.4,
  GHC==8.6.5,
  GHC==8.4.4,
  GHC==8.2.2,
  GHC==8.0.2,
  GHC==7.10.3

source-repository   head
  type:             git
  location:         git@github.com:recursion-ninja/cabal-lower-bounds.git


-- A litany of GHC warnings designed to alert us during the build of any common
-- pitfalls, future compatibility issues, or coding conventions.
common ghc-flags

  default-language:
    Haskell2010

  ghc-options:
    -- Usability flags
    -fdiagnostics-color=always
    -fhide-source-paths
    -j

    -- Optimization flags
    -O2
    -fexcess-precision
    -fexpose-all-unfoldings
    -flate-specialise
    -fmax-simplifier-iterations=16
    -foptimal-applicative-do
    -fspec-constr-count=8
    -fspec-constr-keen
    -fspecialize-aggressively
    -fstatic-argument-transformation

    -- Sanity check warnings
    --   1. Include all warnings by default
    -Weverything
    -Werror
    --   2. Exclude the undesirable warnings
    -Wno-all-missed-specialisations
    -Wno-implicit-prelude
    -Wno-inferred-safe-imports
    -Wno-missed-specialisations
    -Wno-missing-import-lists
    -Wno-missing-safe-haskell-mode
    -Wno-monomorphism-restriction
    -Wno-type-defaults
    -Wno-unsafe

    -Wno-missing-local-signatures

    -Wno-prepositive-qualified-module

  if impl(ghc >= 8.10)
    ghc-options:
      -Wderiving-defaults
      -Wunused-packages

  if impl(ghc >=9.2)
    ghc-options:
      -Wno-missing-kind-signatures

  if impl(ghc >=9.4)
    ghc-options:
      -Wredundant-strictness-flags


executable cabal-lower-bounds

  import:
    ghc-flags
    
  main-is:        
    Main.hs

  hs-source-dirs:
    app/cabal-lower-bounds

  build-depends:
    base          >= 4.8.2  && < 5,
    Cabal         >= 3.0,
    cabal-lower-bounds,
    pretty        >= 1.1.1

library

  import:
    ghc-flags
    
  hs-source-dirs:
    src

  build-depends:
    array         >= 0.5.4,
    base          >= 4.8.2  && < 5,
    bytestring    >= 0.10.6,
    Cabal         >= 3.0,
    cabal-install-solver >= 3.8.1.0,
    containers    >= 0.5.6.1,
    deepseq       >= 1.4.1.1,
    filepath      >= 1.3.0.1,
--    parsec        >= 3.1.13,
    pretty        >= 1.1.3.6,
--    template-haskell,

  exposed-modules:
    Cabal.Package.Parse
    Cabal.Package.Dependencies
    GHC.CoreLibraries
    GHC.CompilerVersion
    GHC.DistributionTable
