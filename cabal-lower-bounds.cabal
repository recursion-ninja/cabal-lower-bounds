Cabal-Version:      2.2
Name:               cabal-lower-bounds
Version:            0.2.0
Build-Type:         Simple
Stability:          Alpha

Synopsis:
  Collect the lower bounds of all dependencies of a cabal project

Description:
  Read in a cabal file and collect the lower bounds of all dependencies.
  Output the lower bounds in a format that is easy to convert into a project file.

Author:             Alex Washburn
Copyright:          Copyright (C) 2020 Alex Washburn
License:            BSD-3-Clause
License-File:       doc/LICENSE

Maintainer:         github@recursion.ninja
Homepage:           https://github.com/recursion-ninja/cabal-lower-bounds
Bug-Reports:        https://github.com/recursion-ninja/cabal-lower-bounds/issues

Category:
  Build Tool
  CLI
  Distribution
  Package Management

Tested-With:
  GHC == 9.4.4
  GHC == 9.2.5
  GHC == 9.0.2
  GHC == 8.10.7
  GHC == 8.8.4
  GHC == 8.6.5
  GHC == 8.4.4
  GHC == 8.2.2

Extra-Doc-Files:
  doc/CHANGELOG.md
  doc/README.md

Source-Repository   head
  Branch:           master
  Location:         git@github.com:recursion-ninja/cabal-lower-bounds.git
  Type:             git


-- A litany of GHC warnings designed to alert us during the build of any common
-- pitfalls, future compatibility issues, or coding conventions.
Common ghc-flags

  default-language:
    Haskell2010

  ghc-options:
    -- Usability flags
    -fdiagnostics-color=always
    -fhide-source-paths

    -- Optimization flags
    -fexcess-precision
    -fexpose-all-unfoldings
    -fmax-simplifier-iterations=16
    -foptimal-applicative-do
    -fspec-constr-count=8
    -fspec-constr-keen
    -fspecialize-aggressively
    -fstatic-argument-transformation

    -- Sanity check warnings
    --   1. Include all warnings by default
    -Weverything
    --   2. Exclude the undesirable warnings
    -Wno-all-missed-specialisations
    -Wno-implicit-prelude
    -Wno-missed-specialisations
    -Wno-missing-import-lists
    -Wno-monomorphism-restriction
    -Wno-type-defaults
    -Wno-unsafe
    -Wno-missing-local-signatures

  if impl(ghc >= 8.6)
    ghc-options:
      -flate-specialise

  if impl(ghc >= 8.10)
    ghc-options:
      -Wderiving-defaults
      -Wunused-packages
      -Wno-inferred-safe-imports
      -Wno-missing-safe-haskell-mode
      -Wno-prepositive-qualified-module

  if impl(ghc >=9.2)
    ghc-options:
      -Wno-missing-kind-signatures

  if impl(ghc >=9.4)
    ghc-options:
      -Wredundant-strictness-flags


Executable cabal-lower-bounds

  import:
    ghc-flags

  main-is:
    Main.hs

  hs-source-dirs:
    app/cabal-lower-bounds

  build-depends:
    base                 >= 4.10.1.0 && < 5,
    cabal-lower-bounds,
    Cabal-syntax         >= 3.6.0.0,
    pretty               >= 1.1.3.3,

Library

  import:
    ghc-flags

  hs-source-dirs:
    src

  build-depends:
    base                 >= 4.10.1.0 && < 5,
    bytestring           >= 0.10.8.2,
    Cabal-syntax         >= 3.6.0.0,
    containers           >= 0.5.10.2,
    deepseq              >= 1.4.3.0,
    filepath             >= 1.4.1.2,

--  autogen-modules:
--    Paths_cabal_lower_bounds

  exposed-modules:
    Cabal.Package.Parse
    Cabal.Package.Dependencies
--    Paths_cabal_lower_bounds


Library core-library-versioning

  import:
    ghc-flags

  hs-source-dirs:
    src

  build-depends:
    array                >= 0.5.2.0,
    base                 >= 4.10.1.0 && < 5,
    Cabal-syntax         >= 3.6.0.0,
    deepseq              >= 1.4.3.0,
    pretty               >= 1.1.3.3,
    template-haskell     >= 2.12.0.0,

  exposed-modules:
    GHC.CompilerVersion
    GHC.CoreLibrary
    GHC.Distribution

  other-modules:
    GHC.CompilerVersion.Type
    GHC.CoreLibrary.Type
    GHC.Distribution.Table
    GHC.Distribution.Table.Type
    GHC.Distribution.Table.Load
